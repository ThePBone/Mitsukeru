// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    var aniListResponse = AniListResponse.FromJson(jsonString);

using Recommendations4AniList.GraphQl;

namespace Recommendations4AniList.Data
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AniListResponse
    {
        [JsonProperty("Page")]
        public Page Page { get; set; }
    }
    
    public partial class Page
    {
        [JsonProperty("pageInfo")]
        public PageInfo PageInfo { get; set; }

        [JsonProperty("mediaList")]
        public MediaList[] MediaList { get; set; }
    }

    public partial class MediaList
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("media")]
        public Media Media { get; set; }
        
        [JsonProperty("status")]
        public MediaListStatus Status { get; set; }
    }

    public partial class Node
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("rating")]
        public long Rating { get; set; }

        [JsonProperty("mediaRecommendation")]
        public Media MediaRecommendation { get; set; }
    }

    public partial class Recommendations
    {
        [JsonProperty("nodes")]
        public Node[] Nodes { get; set; }
    }
    
    public partial class Media
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public Title Title { get; set; }

        [JsonProperty("genres")]
        public string[] Genres { get; set; }

        [JsonProperty("averageScore")]
        public long? AverageScore { get; set; }

        [JsonProperty("coverImage")]
        public CoverImage CoverImage { get; set; }

        [JsonProperty("recommendations", NullValueHandling = NullValueHandling.Ignore)]
        public Recommendations Recommendations { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class CoverImage
    {
        [JsonProperty("large")]
        public Uri Large { get; set; }
    }

    public partial class Title
    {
        [JsonProperty("romaji")]
        public string Romaji { get; set; }

        [JsonProperty("english")]
        public string English { get; set; }
    }

    public partial class PageInfo
    {
        [JsonProperty("currentPage")]
        public long CurrentPage { get; set; }
        
        [JsonProperty("lastPage")]
        public long LastPage { get; set; }
        
        [JsonProperty("hasNextPage")]
        public bool HasNextPage { get; set; }
    }

    public partial class AniListResponse
    {
        public static AniListResponse FromJson(string json) => JsonConvert.DeserializeObject<AniListResponse>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AniListResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
